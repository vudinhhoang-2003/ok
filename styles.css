import java.io.IOException;
import java.util.Iterator;
import java.util.StringTokenizer;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.mapred.JobClient;
import org.apache.hadoop.mapred.Mapper;
import org.apache.hadoop.mapred.MapReduceBase;
import org.apache.hadoop.mapred.Reducer;
import org.apache.hadoop.mapred.Reporter;
import org.apache.hadoop.mapred.OutputCollector;
import org.apache.hadoop.mapred.FileInputFormat;
import org.apache.hadoop.mapred.FileOutputFormat;

public class ProcessUnits {

    // Mapper class
    public static class E_Mapper extends MapReduceBase implements Mapper<LongWritable, Text, Text, IntWritable> {
        // Map function
        public void map(LongWritable key, Text value, OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {
            String line = value.toString();
            String lasttoken = null;
            StringTokenizer s = new StringTokenizer(line, "\t");
            String year = s.nextToken();

            while (s.hasMoreTokens()) {
                lasttoken = s.nextToken();
            }

            int avgprice = Integer.parseInt(lasttoken);
            output.collect(new Text(year), new IntWritable(avgprice));
        }
    }

    // Reducer class
    public static class E_Reduce extends MapReduceBase implements Reducer<Text, IntWritable, Text, IntWritable> {
        // Reduce function
        public void reduce(Text key, Iterator<IntWritable> values, OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {
            int maxavg = 30;
            int val = Integer.MIN_VALUE;

            while (values.hasNext()) {
                if ((val = values.next().get()) > maxavg) {
                    output.collect(key, new IntWritable(val));
                }
            }
        }
    }

    // Main function
    public static void main(String args[]) throws Exception {
        JobConf conf = new JobConf(ProcessUnits.class);
        conf.setJobName("max_electricityunits");

        conf.setOutputKeyClass(Text.class);
        conf.setOutputValueClass(IntWritable.class);

        conf.setMapperClass(E_Mapper.class);
        conf.setCombinerClass(E_Reduce.class);
        conf.setReducerClass(E_Reduce.class);

        conf.setInputFormat(org.apache.hadoop.mapred.TextInputFormat.class);
        conf.setOutputFormat(org.apache.hadoop.mapred.TextOutputFormat.class);

        FileInputFormat.setInputPaths(conf, new Path(args[0]));
        FileOutputFormat.setOutputPath(conf, new Path(args[1]));

        JobClient.runJob(conf);
    }
}











    CREATE TABLE IF NOT EXISTS retail_sales_data (
    year INT,
    month INT,
    supplier STRING,
    item_code STRING,
    item_description STRING,
    item_type STRING,
    retail_sales DOUBLE,
    retail_transfers DOUBLE,
    warehouse_sales DOUBLE
)
ROW FORMAT DELIMITED 
FIELDS TERMINATED BY ',' 
STORED AS TEXTFILE
TBLPROPERTIES ("skip.header.line.count"="1");







    1. Tính tổng doanh số bán lẻ và doanh số kho theo từng nhà cung cấp
sql
Copy code
SELECT 
    supplier,
    SUM(retail_sales) AS total_retail_sales,
    SUM(warehouse_sales) AS total_warehouse_sales
FROM 
    retail_sales_data
GROUP BY 
    supplier
ORDER BY 
    total_retail_sales DESC, total_warehouse_sales DESC;
Giải thích:
SUM: Tính tổng doanh số bán lẻ (retail_sales) và doanh số kho (warehouse_sales) cho từng nhà cung cấp (supplier).
GROUP BY supplier: Dữ liệu được nhóm theo từng nhà cung cấp.
ORDER BY: Sắp xếp kết quả theo tổng doanh số bán lẻ giảm dần, sau đó là tổng doanh số kho.
Mục đích:
Xác định nhà cung cấp nào có doanh số cao nhất để tối ưu hợp tác.





    SELECT 
    item_type,
    SUM(retail_sales) AS total_retail_sales,
    SUM(warehouse_sales) AS total_warehouse_sales
FROM 
    retail_sales_data
WHERE 
    year = 2020
GROUP BY 
    item_type
HAVING 
    SUM(warehouse_sales) > 30000
ORDER BY 
    total_warehouse_sales DESC;


SELECT 
    item_description,
    SUM(retail_sales) AS total_retail_sales,
    SUM(warehouse_sales) AS total_warehouse_sales
FROM 
    retail_sales_data
WHERE 
    warehouse_sales > 10000
GROUP BY 
    item_description
ORDER BY 
    total_warehouse_sales DESC;




    3. Tìm sản phẩm có doanh số cao nhất trong từng loại sản phẩm
sql
Copy code
SELECT 
    item_type,
    item_description,
    MAX(retail_sales) AS max_retail_sales
FROM 
    retail_sales_data
GROUP BY 
    item_type, item_description
ORDER BY 
    item_type, max_retail_sales DESC;
Giải thích:
MAX(retail_sales): Lấy giá trị doanh số bán lẻ cao nhất của từng sản phẩm.
GROUP BY item_type, item_description: Nhóm dữ liệu theo loại sản phẩm và mô tả sản phẩm.
ORDER BY item_type: Sắp xếp theo loại sản phẩm, sau đó theo doanh số giảm dần.
Mục đích:
Tìm sản phẩm nổi bật nhất trong mỗi loại sản phẩm để tập trung quảng bá.




    6. Tìm nhà cung cấp đóng góp nhiều nhất vào tổng doanh số bán lẻ và kho
sql
Copy code
SELECT 
    supplier,
    SUM(retail_sales) + SUM(warehouse_sales) AS total_sales
FROM 
    retail_sales_data
GROUP BY 
    supplier
ORDER BY 
    total_sales DESC
LIMIT 5;
Giải thích:
SUM(retail_sales) + SUM(warehouse_sales): Tính tổng doanh số bán lẻ và doanh số kho của từng nhà cung cấp.
GROUP BY supplier: Nhóm dữ liệu theo từng nhà cung cấp.
ORDER BY total_sales DESC: Sắp xếp theo tổng doanh số giảm dần.
LIMIT 5: Chỉ lấy 5 nhà cung cấp hàng đầu.
Mục đích:
Xác định các nhà cung cấp quan trọng nhất trong chuỗi cung ứng để duy trì mối quan hệ tốt.
